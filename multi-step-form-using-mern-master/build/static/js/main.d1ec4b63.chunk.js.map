{"version":3,"sources":["components/App.js","components/FirstStep.js","components/Progress.js","components/Header.js","components/Login.js","utils/constants.js","components/SecondStep.js","components/App2.js","components/App3.js","components/ThirdStep.js","router/AppRouter.js","index.js"],"names":["App","useState","cname","sname","email","countryc","region","formFields","setFormFields","handleFormChange","event","index","data","target","name","value","submit","e","preventDefault","fetch","method","headers","body","JSON","stringify","res","json","status","window","alert","console","log","className","Form","onSubmit","map","form","placeholder","onChange","Button","onClick","splice","removeFields","type","FirstStep","props","user","useForm","defaultValues","country","handleSubmit","register","errors","updateUser","history","push","div","initial","x","animate","transition","stiffness","Group","variant","withRouter","pathname","location","isFirstStep","isSecondStep","isThirdStep","isLoginPage","Fragment","to","Header","Login","successMessage","setSuccessMessage","errorMessage","setErrorMessage","userDetails","setUserDetails","axios","post","response","first_name","last_name","user_email","state","city","controlId","Label","Control","ref","required","pattern","message","minLength","user_password","SecondStep","control","autoComplete","org_name","org_url","deciding_roles","roles","news_tags","new_tags","App2","indname","global","App3","linkid","twitterid","facebookid","ThirdStep","countries","setCountries","states","setStates","cities","setCities","isLoading","setIsLoading","selectedCountry","setSelectedCountry","selectedState","setSelectedState","selectedCity","setSelectedCity","useEffect","a","csc","getAllCountries","result","allCountries","isoCode","firstCountry","getCountries","getStatesOfCountry","allStates","firstState","getStates","getCitiesOfState","allCities","firstCity","getCities","updatedData","find","Swal","fire","then","isConfirmed","isDismissed","resetUser","icon","title","text","as","length","AppRouter","setUser","prevUser","render","path","exact","component","ReactDOM","document","getElementById"],"mappings":"iVA0HeA,MAlHf,WAAgB,IAAD,EACuBC,mBAAS,CAC3C,CAAEC,MAAO,GAAGC,MAAO,GAAGC,MAAO,GAAGC,SAAU,GAAIC,OAAQ,MACtD,mBAFKC,EAAU,KAAEC,EAAa,KAI1BC,EAAmB,SAACC,EAAOC,GAC/B,IAAIC,EAAI,YAAOL,GACfK,EAAKD,GAAOD,EAAMG,OAAOC,MAAQJ,EAAMG,OAAOE,MAC9CP,EAAcI,IAGVI,EAAM,uCAAG,WAAOC,GAAC,mFAEwB,OAD7CA,EAAEC,iBACMhB,EAA0CK,EAA1CL,MAAOC,EAAmCI,EAAnCJ,MAAOC,EAA4BG,EAA5BH,MAAOC,EAAqBE,EAArBF,SAAUC,EAAWC,EAAXD,OAAM,SAE3Ba,MAAM,YAAY,CAClCC,OAAQ,OACRC,QAAS,CACP,eAAiB,oBAEnBC,KAAKC,KAAKC,UAAU,CAClBtB,QAAOC,QAAOC,QAAOC,WAAUC,aAEjC,OARO,OAAHmB,EAAG,gBASUA,EAAIC,OAAO,KAAD,EAEV,OAFbd,EAAI,QAEFe,QAAmBf,GAOzBgB,OAAOC,MAAM,2BACbC,QAAQC,IAAI,6BAPZH,OAAOC,MAAM,wBACbC,QAAQC,IAAI,yBAWdD,QAAQC,IAAIxB,GAAW,4CACxB,gBA7BW,sCAkDZ,OAEE,sBAAKyB,UAAU,MAAK,UAIlB,cAACC,EAAA,EAAI,CAACb,OAAO,OAAOc,SAAUlB,EAAO,SAClCT,EAAW4B,KAAI,SAACC,EAAMzB,GACrB,OACE,gCACE,uBACEG,KAAK,QACLuB,YAAY,gBACZC,SAAU,SAAA5B,GAAK,OAAID,EAAiBC,EAAOC,IAC3CI,MAAOqB,EAAKlC,QAEd,uBACEY,KAAK,QACLuB,YAAY,oBACZC,SAAU,SAAA5B,GAAK,OAAID,EAAiBC,EAAOC,IAC3CI,MAAOqB,EAAKjC,QAEd,uBACEW,KAAK,QACLuB,YAAY,SACZC,SAAU,SAAA5B,GAAK,OAAID,EAAiBC,EAAOC,IAC3CI,MAAOqB,EAAKhC,QAEd,uBACEU,KAAK,WACLuB,YAAY,uBACZC,SAAU,SAAA5B,GAAK,OAAID,EAAiBC,EAAOC,IAC3CI,MAAOqB,EAAK/B,WAEd,uBACES,KAAK,SACLuB,YAAY,sBACZC,SAAU,SAAA5B,GAAK,OAAID,EAAiBC,EAAOC,IAC3CI,MAAOqB,EAAK9B,SACZ,uBACF,cAACiC,EAAA,EAAM,CAACC,QAAS,kBA9CR,SAAC7B,GACpB,IAAIC,EAAI,YAAOL,GACfK,EAAK6B,OAAO9B,EAAO,GACnBH,EAAcI,GA2CmB8B,CAAa/B,IAAO,sBA/BnCA,QAoChB,cAAC4B,EAAA,EAAM,CAACI,KAAK,SAASH,QAhER,SAACvB,GACjBA,EAAEC,iBASFV,EAAc,GAAD,mBAAKD,GAAU,CARf,CACXL,MAAO,GACPC,MAAO,GACPC,MAAO,GACPC,SAAU,GACVC,OAAQ,QAyDiC,wBACzC,uBACA,cAACiC,EAAA,EAAM,CAACC,QAASxB,EAAO,wBC0Cf4B,EAvJG,SAACC,GAAW,IACpBC,EAASD,EAATC,KAAI,EAC+BC,YAAQ,CACjDC,cAAe,CACb9C,MAAO4C,EAAK5C,MACZC,MAAO2C,EAAK3C,MACZC,MAAO0C,EAAK1C,MACZE,OAAQwC,EAAK3C,MACb8C,QAASH,EAAKG,WANAC,GAAF,EAARC,SAAsB,EAAZD,cAAoB,EAANE,OAgBhC,OACE,cAACnB,EAAA,EAAI,CAACD,UAAU,aAAaE,SAAUgB,GAPxB,SAACtC,GAChBiC,EAAMQ,WAAWzC,GAEjBiC,EAAMS,QAAQC,KAAK,cAI2C,SAC5D,eAAC,IAAOC,IAAG,CACTxB,UAAU,uBACVyB,QAAS,CAAEC,EAAG,UACdC,QAAS,CAAED,EAAG,GACdE,WAAY,CAAEC,UAAW,KAAM,UA4C/B,cAAC5B,EAAA,EAAK6B,MAAK,UACT,cAAC,EAAG,MA0EN,cAACvB,EAAA,EAAM,CAACwB,QAAQ,UAAUpB,KAAK,SAAQ,wBC7GhCqB,eAtCE,SAAH,GAAoC,IAAlBC,EAAQ,EAApBC,SAAYD,SACxBE,EAA2B,MAAbF,EACdG,EAA4B,YAAbH,EACfI,EAA2B,WAAbJ,EACdK,EAA2B,WAAbL,EAEpB,OACE,cAAC,IAAMM,SAAQ,UACXD,EAwBA,wBAvBA,sBAAKtC,UAAU,QAAO,UACpB,sBAAKA,UAAS,UAAKmC,EAAc,cAAgB,QAAS,UACxD,oCACA,8BACGC,GAAgBC,EACf,cAAC,IAAI,CAACG,GAAG,IAAG,oBAEZ,cAIN,sBAAKxC,UAAS,UAAKoC,EAAe,cAAgB,QAAS,UACzD,oCACA,8BACGC,EAAc,cAAC,IAAI,CAACG,GAAG,UAAS,oBAAiB,cAGtD,sBAAKxC,UAAS,UAAkB,WAAbiC,EAAwB,cAAgB,QAAS,UAClE,oCACA,oDCrBGQ,EAPA,WAAH,OACV,gCACE,yDACA,cAAC,EAAQ,Q,iBC6FEC,EA7FD,WAAO,IAAD,EACyB3B,cAAnCI,EAAQ,EAARA,SAAUD,EAAY,EAAZA,aAAcE,EAAM,EAANA,OAAM,EACMnD,mBAAS,IAAG,mBAAjD0E,EAAc,KAAEC,EAAiB,OACA3E,mBAAS,IAAG,mBAA7C4E,EAAY,KAAEC,EAAe,OACE7E,mBAAS,IAAG,mBAA3C8E,EAAW,KAAEC,EAAc,KAE5B9C,EAAQ,uCAAG,WAAOtB,GAAI,uEACR,OAAlBkB,QAAQC,IAAInB,GAAM,kBAGOqE,IAAMC,KAAK,GAAD,OChBX,GDgB2B,UAAUtE,GAAM,KAAD,EAA1DuE,EAAQ,OACdP,EAAkB,6CAClBE,EAAgB,IAChBE,EAAeG,EAASvE,MAAM,kDAE9BkB,QAAQC,IAAI,EAAD,IACP,KAAMoD,WACRrD,QAAQC,IAAI,QAAS,KAAMoD,SAASvE,MACpCkE,EAAgB,KAAMK,SAASvE,OAChC,0DAEJ,gBAfa,sCAiBd,OACE,cAACqB,EAAA,EAAI,CAACD,UAAU,aAAaE,SAAUgB,EAAahB,GAAU,SAC5D,sBAAKF,UAAU,uBAAsB,UAClC6C,EACC,mBAAG7C,UAAU,uBAAsB,SAAE6C,IAErC,gCACE,mBAAG7C,UAAU,aAAY,SAAE2C,IAE1BI,GACC,sBAAK/C,UAAU,eAAc,UAC3B,gEACA,+CAAkB+C,EAAYK,cAC9B,8CAAiBL,EAAYM,aAC7B,0CAAaN,EAAYO,cACzB,4CAAeP,EAAY9B,WAC3B,0CAAa8B,EAAYQ,SACzB,yCAAYR,EAAYS,cAKhC,eAACvD,EAAA,EAAK6B,MAAK,CAAC2B,UAAU,aAAY,UAChC,cAACxD,EAAA,EAAKyD,MAAK,oBACX,cAACzD,EAAA,EAAK0D,QAAO,CACXhD,KAAK,QACL7B,KAAK,aACLuB,YAAY,2BACZuD,IAAKzC,EAAS,CACZ0C,SAAU,qBACVC,QAAS,CACP/E,MAAO,8BACPgF,QAAS,yBAGb/D,UAAS,UAAKoB,EAAOkC,WAAa,cAAgB,MAEnDlC,EAAOkC,YACN,mBAAGtD,UAAU,WAAU,SAAEoB,EAAOkC,WAAWS,aAI/C,eAAC9D,EAAA,EAAK6B,MAAK,CAAC2B,UAAU,WAAU,UAC9B,cAACxD,EAAA,EAAKyD,MAAK,uBACX,cAACzD,EAAA,EAAK0D,QAAO,CACXhD,KAAK,WACL7B,KAAK,gBACLuB,YAAY,oBACZuD,IAAKzC,EAAS,CACZ0C,SAAU,wBACVG,UAAW,CACTjF,MAAO,EACPgF,QAAS,iDAGb/D,UAAS,UAAKoB,EAAO6C,cAAgB,cAAgB,MAEtD7C,EAAO6C,eACN,mBAAGjE,UAAU,WAAU,SAAEoB,EAAO6C,cAAcF,aAIlD,cAACxD,EAAA,EAAM,CAACwB,QAAQ,UAAUpB,KAAK,SAAQ,+BEyRhCuD,EAjWI,SAACrD,GAAW,IACrBC,EAASD,EAATC,KAAI,EAC+BC,YAAQ,CACjDC,cAAe,CACbsC,WAAYxC,EAAKwC,WACjBW,cAAenD,EAAKmD,iBAHhB9C,EAAQ,EAARA,SAAUD,EAAY,EAAZA,aAAcE,EAAM,EAANA,OAU5BL,cADFoD,QASF,OACE,cAAClE,EAAA,EAAI,CAACD,UAAU,aAAaE,SAAUgB,GANxB,SAACtC,GAChBiC,EAAMQ,WAAWzC,GACjBiC,EAAMS,QAAQC,KAAK,aAI2C,SAC5D,eAAC,IAAOC,IAAG,CACTxB,UAAU,uBACVyB,QAAS,CAAEC,EAAG,UACdC,QAAS,CAAED,EAAG,GACdE,WAAY,CAAEC,UAAW,KAAM,UAE/B,eAAC5B,EAAA,EAAK6B,MAAK,CAAC2B,UAAU,aAAY,UAChC,cAACxD,EAAA,EAAKyD,MAAK,oBACX,cAACzD,EAAA,EAAK0D,QAAO,CACXhD,KAAK,QACL7B,KAAK,aACLuB,YAAY,2BACZ+D,aAAa,MACbR,IAAKzC,EAAS,CACZ0C,SAAU,qBACVC,QAAS,CACP/E,MAAO,8BACPgF,QAAS,yBAGb/D,UAAS,UAAKoB,EAAOkC,WAAa,cAAgB,MAEnDlC,EAAOkC,YACN,mBAAGtD,UAAU,WAAU,SAAEoB,EAAOkC,WAAWS,aAO/C,eAAC9D,EAAA,EAAK6B,MAAK,CAAC2B,UAAU,aAAY,UAChC,cAACxD,EAAA,EAAKyD,MAAK,yBACX,cAACzD,EAAA,EAAK0D,QAAO,CACXhD,KAAK,OACL7B,KAAK,aACLuB,YAAY,mBACZ+D,aAAa,KACbR,IAAKzC,EAAS,CACZ0C,SAAU,0BACVC,QAAS,CACP/E,MAAO,cACPgF,QAAS,gDAGb/D,UAAS,UAAKoB,EAAOgC,WAAa,cAAgB,MAEnDhC,EAAOgC,YACN,mBAAGpD,UAAU,WAAU,SAAEoB,EAAOgC,WAAWW,aAK/C,eAAC9D,EAAA,EAAK6B,MAAK,CAAC2B,UAAU,YAAW,UAC/B,cAACxD,EAAA,EAAKyD,MAAK,wBACX,cAACzD,EAAA,EAAK0D,QAAO,CACXhD,KAAK,OACL7B,KAAK,YACLuB,YAAY,kBACZ+D,aAAa,KACbR,IAAKzC,EAAS,CACZ0C,SAAU,yBACVC,QAAS,CACP/E,MAAO,cACPgF,QAAS,+CAGb/D,UAAS,UAAKoB,EAAOiC,UAAY,cAAgB,MAElDjC,EAAOiC,WACN,mBAAGrD,UAAU,WAAU,SAAEoB,EAAOiC,UAAUU,aAK9C,eAAC9D,EAAA,EAAK6B,MAAK,CAAC2B,UAAU,WAAU,UAC9B,cAACxD,EAAA,EAAKyD,MAAK,gCACX,cAACzD,EAAA,EAAK0D,QAAO,CACXhD,KAAK,OACL7B,KAAK,WACLuB,YAAY,0BACZ+D,aAAa,KACbR,IAAKzC,EAAS,CACZ0C,SAAU,iCACVC,QAAS,CACP/E,MAAO,cACPgF,QAAS,uDAGb/D,UAAS,UAAKoB,EAAOiD,SAAW,cAAgB,MAEjDjD,EAAOiD,UACN,mBAAGrE,UAAU,WAAU,SAAEoB,EAAOiD,SAASN,aAK7C,eAAC9D,EAAA,EAAK6B,MAAK,CAAC2B,UAAU,UAAS,UAC7B,cAACxD,EAAA,EAAKyD,MAAK,yCACX,cAACzD,EAAA,EAAK0D,QAAO,CACXhD,KAAK,OACL7B,KAAK,UACLuB,YAAY,YACZ+D,aAAa,KACbR,IAAKzC,EAAS,CACZ0C,SAAU,mBACVC,QAAS,CAEPC,QAAS,yCAGb/D,UAAS,UAAKoB,EAAOkD,QAAU,cAAgB,MAEhDlD,EAAOkD,SACN,mBAAGtE,UAAU,WAAU,SAAEoB,EAAOkD,QAAQP,aAqG5C,eAAC9D,EAAA,EAAK6B,MAAK,CAAC2B,UAAU,WAAU,UAC9B,cAACxD,EAAA,EAAKyD,MAAK,uBACX,cAACzD,EAAA,EAAK0D,QAAO,CACXhD,KAAK,WACL7B,KAAK,gBACLuB,YAAY,oBACZ+D,aAAa,MACbR,IAAKzC,EAAS,CACZ0C,SAAU,wBACVG,UAAW,CACTjF,MAAO,EACPgF,QAAS,iDAGb/D,UAAS,UAAKoB,EAAO6C,cAAgB,cAAgB,MAEtD7C,EAAO6C,eACN,mBAAGjE,UAAU,WAAU,SAAEoB,EAAO6C,cAAcF,aAIlD,eAAC9D,EAAA,EAAK6B,MAAK,CAAC2B,UAAU,iBAAgB,UACpC,cAACxD,EAAA,EAAKyD,MAAK,gCACX,cAACzD,EAAA,EAAK0D,QAAO,CACXhD,KAAK,OACL7B,KAAK,iBACLuB,YAAY,+CACZ+D,aAAa,MACbR,IAAKzC,EAAS,CACZ0C,SAAU,0BACVC,QAAS,CAEPC,QAAS,qCAGb/D,UAAS,UAAKoB,EAAOmD,eAAiB,cAAgB,MAEvDnD,EAAOmD,gBACN,mBAAGvE,UAAU,WAAU,SAAEoB,EAAOmD,eAAeR,aAKnD,eAAC9D,EAAA,EAAK6B,MAAK,CAAC2B,UAAU,QAAO,UAC3B,cAACxD,EAAA,EAAKyD,MAAK,+EACX,cAACzD,EAAA,EAAK0D,QAAO,CACXhD,KAAK,OACL7B,KAAK,QACLuB,YAAY,4BACZ+D,aAAa,MACbR,IAAKzC,EAAS,CACZ0C,SAAU,0BACVC,QAAS,CAEPC,QAAS,sDAGb/D,UAAS,UAAKoB,EAAOoD,MAAQ,cAAgB,MAE9CpD,EAAOoD,OACN,mBAAGxE,UAAU,WAAU,SAAEoB,EAAOoD,MAAMT,aAK1C,eAAC9D,EAAA,EAAK6B,MAAK,CAAC2B,UAAU,YAAW,UAC/B,cAACxD,EAAA,EAAKyD,MAAK,4EAEX,cAACzD,EAAA,EAAK0D,QAAO,CACXhD,KAAK,OACL7B,KAAK,YACLuB,YAAY,4BACZ+D,aAAa,MACbR,IAAKzC,EAAS,CACZ0C,SAAU,8BACVC,QAAS,CAEPC,QAAS,mDAGb/D,UAAS,UAAKoB,EAAOqD,UAAY,cAAgB,MAElDrD,EAAOsD,UACN,mBAAG1E,UAAU,WAAU,SAAEoB,EAAOqD,UAAUV,aAuBtD,uBAGQ,cAACxD,EAAA,EAAM,CAACwB,QAAQ,UAAUpB,KAAK,SAAQ,wB,kCCjRhCgE,MAnFf,WAAiB,IAAD,EACsB1G,mBAAS,CAC3C,CAAE2G,QAAS,GAAGC,OAAQ,GAAG5D,QAAS,GAAI3C,OAAQ,MAC9C,mBAFKC,EAAU,KAAEC,EAAa,KAI1BC,EAAmB,SAACC,EAAOC,GAC/B,IAAIC,EAAI,YAAOL,GACfK,EAAKD,GAAOD,EAAMG,OAAOC,MAAQJ,EAAMG,OAAOE,MAC9CP,EAAcI,IAGVI,EAAS,SAACC,GACdA,EAAEC,iBACFY,QAAQC,IAAIxB,IAqBd,OAEE,sBAAKyB,UAAU,OAAM,UAKnB,cAACC,EAAA,EAAI,CAACC,SAAUlB,EAAO,SACpBT,EAAW4B,KAAI,SAACC,EAAMzB,GACrB,OACE,gCACE,uBACEG,KAAK,UACLuB,YAAY,QACZC,SAAU,SAAA5B,GAAK,OAAID,EAAiBC,EAAOC,IAC3CI,MAAOqB,EAAKwE,UAEd,uBACE9F,KAAK,SACLuB,YAAY,SACZC,SAAU,SAAA5B,GAAK,OAAID,EAAiBC,EAAOC,IAC3CI,MAAOqB,EAAKyE,SAEd,uBACE/F,KAAK,UACLuB,YAAY,yBACZC,SAAU,SAAA5B,GAAK,OAAID,EAAiBC,EAAOC,IAC3CI,MAAOqB,EAAKa,UAEd,uBACEnC,KAAK,SACLuB,YAAY,sBACZC,SAAU,SAAA5B,GAAK,OAAID,EAAiBC,EAAOC,IAC3CI,MAAOqB,EAAK9B,SAEd,uBACA,cAACiC,EAAA,EAAM,CAACC,QAAS,kBA1CR,SAAC7B,GACpB,IAAIC,EAAI,YAAOL,GACfK,EAAK6B,OAAO9B,EAAO,GACnBH,EAAcI,GAuCmB8B,CAAa/B,IAAO,sBA1BnCA,QA+BhB,cAAC4B,EAAA,EAAM,CAACI,KAAK,SAASH,QA3DR,SAACvB,GACjBA,EAAEC,iBAQFV,EAAc,GAAD,mBAAKD,GAAU,CAPf,CACXqG,QAAS,GACTC,OAAQ,GACR5D,QAAS,GACT3C,OAAQ,QAqDiC,wBACzC,uBACA,cAACiC,EAAA,EAAM,CAACC,QAASxB,EAAO,wBCYf8F,MAzFf,WAAiB,IAAD,EACsB7G,mBAAS,CAC3C,CAAEa,KAAM,GAAGV,MAAO,GAAG2G,OAAQ,GAAIC,UAAW,GAAGC,WAAY,MAC3D,mBAFK1G,EAAU,KAAEC,EAAa,KAI1BC,EAAmB,SAACC,EAAOC,GAC/B,IAAIC,EAAI,YAAOL,GACfK,EAAKD,GAAOD,EAAMG,OAAOC,MAAQJ,EAAMG,OAAOE,MAC9CP,EAAcI,IAGVI,EAAS,SAACC,GACdA,EAAEC,iBACFY,QAAQC,IAAIxB,IAsBd,OAEE,sBAAKyB,UAAU,OAAM,UAInB,cAACC,EAAA,EAAI,CAACC,SAAUlB,EAAO,SACpBT,EAAW4B,KAAI,SAACC,EAAMzB,GACrB,OACE,gCACE,uBACEG,KAAK,OACLuB,YAAY,OACZC,SAAU,SAAA5B,GAAK,OAAID,EAAiBC,EAAOC,IAC3CI,MAAOqB,EAAKtB,OAEd,uBACEA,KAAK,QACLuB,YAAY,SACZC,SAAU,SAAA5B,GAAK,OAAID,EAAiBC,EAAOC,IAC3CI,MAAOqB,EAAKhC,QAEd,uBACEU,KAAK,SACLuB,YAAY,cACZC,SAAU,SAAA5B,GAAK,OAAID,EAAiBC,EAAOC,IAC3CI,MAAOqB,EAAK2E,SAEd,uBACEjG,KAAK,YACLuB,YAAY,aACZC,SAAU,SAAA5B,GAAK,OAAID,EAAiBC,EAAOC,IAC3CI,MAAOqB,EAAK4E,YAEd,uBACElG,KAAK,aACLuB,YAAY,cACZC,SAAU,SAAA5B,GAAK,OAAID,EAAiBC,EAAOC,IAC3CI,MAAOqB,EAAK6E,aAEd,uBACA,cAAC1E,EAAA,EAAM,CAACC,QAAS,kBA/CR,SAAC7B,GACpB,IAAIC,EAAI,YAAOL,GACfK,EAAK6B,OAAO9B,EAAO,GACnBH,EAAcI,GA4CmB8B,CAAa/B,IAAO,sBAhCnCA,QAqChB,cAAC4B,EAAA,EAAM,CAACI,KAAK,SAASH,QAjER,SAACvB,GACjBA,EAAEC,iBASFV,EAAc,GAAD,mBAAKD,GAAU,CARf,CACXO,KAAM,GACNV,MAAO,GACP2G,OAAQ,GACRC,UAAW,GACXC,WAAY,QA0D6B,wBACzC,uBACA,cAAC1E,EAAA,EAAM,CAACC,QAASxB,EAAO,wBCkIfkG,EAnNG,SAACrE,GAAW,IAAD,EACO5C,mBAAS,IAAG,mBAAvCkH,EAAS,KAAEC,EAAY,OACFnH,mBAAS,IAAG,mBAAjCoH,EAAM,KAAEC,EAAS,OACIrH,mBAAS,IAAG,mBAAjCsH,EAAM,KAAEC,EAAS,OACUvH,oBAAS,GAAM,mBAA1CwH,EAAS,KAAEC,EAAY,OAEgBzH,mBAAS,IAAG,mBAAnD0H,EAAe,KAAEC,EAAkB,OACA3H,mBAAS,IAAG,mBAA/C4H,EAAa,KAAEC,EAAgB,OACE7H,mBAAS,IAAG,mBAA7C8H,EAAY,KAAEC,EAAe,KAEpCC,qBAAU,YACU,uCAAG,sCAAAC,EAAA,sDAEE,OAFF,SAEjBR,GAAa,GAAM,SACES,IAAIC,kBAAkB,KAAD,EAApCC,EAAM,OACO,GACnBC,EAAqB,OAAND,QAAM,IAANA,OAAM,EAANA,EAAQlG,KAAI,YAAgB,MAAQ,CACjDoG,QADmC,EAAPA,QAE5BzH,KAFyC,EAAJA,SAGnC,EACqCwH,EAAY,0BAAnCE,GAAmC,aAAlB,GAAE,GAA5BD,QACTnB,EAAakB,GACbV,EAAmBY,GACnBd,GAAa,GAAO,kDAEpBN,EAAa,IACbM,GAAa,GAAO,0DAEvB,kBAjBiB,mCAmBlBe,KACC,IAEHR,qBAAU,YACO,uCAAG,wCAAAC,EAAA,+EAEOC,IAAIO,mBAAmBf,GAAiB,KAAD,EAAtDU,EAAM,OACI,GAChBM,EAAkB,OAANN,QAAM,IAANA,OAAM,EAANA,EAAQlG,KAAI,YAAgB,MAAQ,CAC9CoG,QADgC,EAAPA,QAEzBzH,KAFsC,EAAJA,SAGhC,EACwC6H,EAAS,0BAAb,GAAa,aAAf,GAAE,GAA/BJ,QAASK,OAAU,MAAG,GAAE,EACjCpB,EAAU,IACVQ,EAAgB,IAChBV,EAAUqB,GACVb,EAAiBc,GAAY,kDAE7BtB,EAAU,IACVE,EAAU,IACVQ,EAAgB,IAAI,0DAEvB,kBAlBc,mCAoBfa,KACC,CAAClB,IAEJM,qBAAU,YACO,uCAAG,wCAAAC,EAAA,+EAEOC,IAAIW,iBACvBnB,EACAE,GACA,KAAD,EAHKQ,EAAM,OAII,GAChBU,EAAkB,OAANV,QAAM,IAANA,OAAM,EAANA,EAAQlG,KAAI,YAAO,MAAQ,CACrCrB,KAD6B,EAAJA,SAEvB,EACoCiI,EAAS,0BAAb,GAAa,aAAf,GAAE,GAA3BjI,KAAMkI,OAAS,MAAG,GAAE,EAC7BxB,EAAUuB,GACVf,EAAgBgB,GAAW,kDAE3BxB,EAAU,IAAI,0DAEjB,kBAhBc,mCAkBfyB,KACC,CAACpB,IAEJ,IAAM3E,EAAY,uCAAG,WAAOxC,GAAK,6EAY5B,OAXHA,EAAMQ,iBAAiB,SAGb4B,EAASD,EAATC,KACFoG,EAAc,CAClBjG,QAEC,QAFM,EAAEkE,EAAUgC,MACjB,SAAClG,GAAO,OAAKA,EAAQsF,UAAYZ,YAClC,aAFQ,EAEN7G,KACHyE,OACyD,QAAvD,EAAA8B,EAAO8B,MAAK,SAAC5D,GAAK,OAAKA,EAAMgD,UAAYV,YAAc,aAAvD,EAAyD/G,OAAQ,GACnE0E,KAAMuC,GACN,EAAD,OAEK9C,IAAMC,KAAK,GAAD,OJvGM,GIuGU,wCAC3BpC,GACAoG,IACF,KAAD,EACFE,IAAKC,KAAK,WAAY,kCAAmC,WAAWC,MAClE,SAACjB,IACKA,EAAOkB,aAAelB,EAAOmB,eAC/B3G,EAAM4G,YACN5G,EAAMS,QAAQC,KAAK,SAGvB,gDAEE,KAAM4B,WACRiE,IAAKC,KAAK,CACRK,KAAM,QACNC,MAAO,UACPC,KAAM,KAAMzE,SAASvE,OAEvBkB,QAAQC,IAAI,QAAS,KAAMoD,SAASvE,OACrC,yDAEJ,gBApCiB,sCAsClB,OACE,cAACqB,EAAA,EAAI,CAACD,UAAU,aAAaE,SAAUgB,EAAa,SAClD,eAAC,IAAOM,IAAG,CACTxB,UAAU,uBACVyB,QAAS,CAAEC,EAAG,UACdC,QAAS,CAAED,EAAG,GACdE,WAAY,CAAEC,UAAW,KAAM,UAG/B,eAAC5B,EAAA,EAAK6B,MAAK,WACX,cAAC7B,EAAA,EAAKyD,MAAK,iCACT,cAAC,EAAI,OAGP,eAACzD,EAAA,EAAK6B,MAAK,WACX,cAAC7B,EAAA,EAAKyD,MAAK,sCACT,cAAC,EAAI,OAGP,eAACzD,EAAA,EAAK6B,MAAK,WACX,cAAC7B,EAAA,EAAKyD,MAAK,wCACT,cAAC,EAAI,OAIP,eAACzD,EAAA,EAAK6B,MAAK,CAAC2B,UAAU,UAAS,UAC5BgC,GACC,mBAAGzF,UAAU,UAAS,+CAExB,cAACC,EAAA,EAAKyD,MAAK,sBACX,cAACzD,EAAA,EAAK0D,QAAO,CACXkE,GAAG,SACH/I,KAAK,UACLC,MAAO4G,EACPrF,SAAU,SAAC5B,GAAK,OAAKkH,EAAmBlH,EAAMG,OAAOE,QAAO,SAE3DoG,EAAUhF,KAAI,gBAAGoG,EAAO,EAAPA,QAASzH,EAAI,EAAJA,KAAI,OAC7B,wBAAQC,MAAOwH,EAAQ,SACpBzH,GAD0ByH,WAOnC,eAACtG,EAAA,EAAK6B,MAAK,CAAC2B,UAAU,QAAO,UAC3B,cAACxD,EAAA,EAAKyD,MAAK,oBACX,cAACzD,EAAA,EAAK0D,QAAO,CACXkE,GAAG,SACH/I,KAAK,QACLC,MAAO8G,EACPvF,SAAU,SAAC5B,GAAK,OAAKoH,EAAiBpH,EAAMG,OAAOE,QAAO,SAEzDsG,EAAOyC,OAAS,EACfzC,EAAOlF,KAAI,gBAAGoG,EAAO,EAAPA,QAASzH,EAAI,EAAJA,KAAI,OACzB,wBAAQC,MAAOwH,EAAQ,SACpBzH,GAD0ByH,MAK/B,wBAAQxH,MAAM,GAAE,2BAAK,SAO3B,eAACkB,EAAA,EAAK6B,MAAK,CAAC2B,UAAU,OAAM,UAC1B,cAACxD,EAAA,EAAKyD,MAAK,mBACX,cAACzD,EAAA,EAAK0D,QAAO,CACXkE,GAAG,SACH/I,KAAK,OACLC,MAAOgH,EACPzF,SAAU,SAAC5B,GAAK,OAAKsH,EAAgBtH,EAAMG,OAAOE,QAAO,SAExDwG,EAAOuC,OAAS,EACfvC,EAAOpF,KAAI,gBAAGrB,EAAI,EAAJA,KAAI,OAChB,wBAAQC,MAAOD,EAAK,SACjBA,GADuBA,MAK5B,wBAAQC,MAAM,GAAE,kCAKtB,cAACwB,EAAA,EAAM,CAACwB,QAAQ,UAAUpB,KAAK,SAAQ,4BC7JhCoH,EAhDG,WAAO,IAAD,EACE9J,mBAAS,IAAG,mBAA7B6C,EAAI,KAAEkH,EAAO,KAEd3G,EAAa,SAACzC,GAClBoJ,GAAQ,SAACC,GAAQ,kCAAWA,GAAarJ,OAGrC6I,EAAY,WAChBO,EAAQ,KAGV,OACE,cAAC,IAAa,UACZ,sBAAKhI,UAAU,YAAW,UACxB,cAAC,EAAM,IACP,eAAC,IAAM,WACL,cAAC,IAAK,CACJkI,OAAQ,SAACrH,GAAK,OACZ,cAAC,EAAS,2BAAKA,GAAK,IAAEC,KAAMA,EAAMO,WAAYA,MAEhD8G,KAAK,IACLC,OAAO,IAET,cAAC,IAAK,CACJF,OAAQ,SAACrH,GAAK,OACZ,cAAC,EAAU,2BAAKA,GAAK,IAAEC,KAAMA,EAAMO,WAAYA,MAEjD8G,KAAK,YAEP,cAAC,IAAK,CACJD,OAAQ,SAACrH,GAAK,OACZ,cAAC,EAAS,2BACJA,GAAK,IACTC,KAAMA,EACNO,WAAYA,EACZoG,UAAWA,MAGfU,KAAK,WAEP,cAAC,IAAK,CAACE,UAAW3F,EAAOyF,KAAK,WAC9B,cAAC,IAAK,CAACD,OAAQ,kBAAM,cAAC,IAAQ,CAAC1F,GAAG,kB,YC3C5C8F,IAASJ,OAAO,cAAC,EAAS,IAAKK,SAASC,eAAe,W","file":"static/js/main.d1ec4b63.chunk.js","sourcesContent":["import \"./App.css\";\r\n// import Form from \"./components/Form\";\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { useState } from 'react';\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n  const [formFields, setFormFields] = useState([\r\n    { cname: '',sname: '',email: '',countryc: '', region: '' },\r\n  ])\r\n\r\n  const handleFormChange = (event, index) => {\r\n    let data = [...formFields];\r\n    data[index][event.target.name] = event.target.value;\r\n    setFormFields(data);\r\n  }\r\n\r\n  const submit = async (e) => {\r\n    e.preventDefault();\r\n    const { cname ,sname ,email ,countryc ,region } = formFields;\r\n\r\n    const res = await fetch(\"/register\",{\r\n      method :\"POST\",\r\n      headers :{\r\n        \"Content-Type\" : \"application/json\"\r\n      },\r\n      body:JSON.stringify({\r\n        cname ,sname ,email ,countryc ,region\r\n      })\r\n    })\r\n    const data = await res.json();\r\n\r\n    if(data.status === 422 || !data){\r\n      window.alert(\"Invalid Registration\");\r\n      console.log(\"Invalid Registration\");\r\n\r\n\r\n    }\r\n    else{\r\n      window.alert(\"Successful Registration\");\r\n      console.log(\"Successful Registration\");\r\n\r\n    }\r\n\r\n\r\n    console.log(formFields)\r\n  }\r\n\r\n  const addFields = (e) => {\r\n    e.preventDefault();\r\n    let object = {\r\n      cname: '',\r\n      sname: '',\r\n      email: '',\r\n      countryc: '',\r\n      region: ''\r\n    }\r\n\r\n    setFormFields([...formFields, object])\r\n  }\r\n\r\n  const removeFields = (index) => {\r\n    let data = [...formFields];\r\n    data.splice(index, 1)\r\n    setFormFields(data)\r\n  }\r\n\r\n  return (\r\n\r\n    <div className=\"App\">\r\n    \r\n      {/* <Form > */}\r\n  \r\n      <Form method=\"POST\" onSubmit={submit}>\r\n        {formFields.map((form, index) => {\r\n          return (\r\n            <div key={index}>\r\n              <input\r\n                name='cname'\r\n                placeholder='Customer Name'\r\n                onChange={event => handleFormChange(event, index)}\r\n                value={form.cname}\r\n              />\r\n              <input\r\n                name='sname'\r\n                placeholder='Stakeholder Names'\r\n                onChange={event => handleFormChange(event, index)}\r\n                value={form.sname}\r\n              />\r\n              <input\r\n                name='email'\r\n                placeholder='E Mail'\r\n                onChange={event => handleFormChange(event, index)}\r\n                value={form.email}\r\n              />\r\n              <input\r\n                name='countryc'\r\n                placeholder='Country of Operation'\r\n                onChange={event => handleFormChange(event, index)}\r\n                value={form.countryc}\r\n              />\r\n              <input\r\n                name='region'\r\n                placeholder='Region of Operation'\r\n                onChange={event => handleFormChange(event, index)}\r\n                value={form.region}\r\n              /><br></br>\r\n              <Button onClick={() => removeFields(index)}>Remove</Button>\r\n            </div>\r\n          )\r\n        })}\r\n      </Form>\r\n      <Button type=\"button\" onClick={addFields}>Add More..</Button>\r\n      <br />\r\n      <Button onClick={submit}>Submit</Button>\r\n      {/* </Form> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Form, Button } from 'react-bootstrap';\nimport { motion } from 'framer-motion';\nimport App from \"./App\";\nimport { useState } from 'react';\n\nconst FirstStep = (props) => {\n  const { user } = props;\n  const { register, handleSubmit, errors } = useForm({\n    defaultValues: {\n      cname: user.cname,\n      sname: user.sname,\n      email: user.email,\n      region: user.sname,\n      country: user.country\n    }\n  });\n\n  const onSubmit = (data) => {\n    props.updateUser(data);\n    \n    props.history.push('/second');\n  };\n \n  return (\n    <Form className=\"input-form\" onSubmit={handleSubmit(onSubmit)}> \n      <motion.div\n        className=\"col-md-6 offset-md-3\"\n        initial={{ x: '-100vw' }}\n        animate={{ x: 0 }}\n        transition={{ stiffness: 150 }}\n      >\n        {/* <Form.Group controlId=\"customer_name\">\n          <Form.Label>Customer Name</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"customer_name\"\n            placeholder=\"Enter the Customers name\"\n            autoComplete=\"off\"\n            ref={register({\n              required: 'Customer name is required.',\n              pattern: {\n                // value: /^[a-zA-Z]+$/,\n                message: 'Customer name should contain only characters.'\n              }\n            })}\n            className={`${errors.customer_name ? 'input-error' : ''}`}\n          />\n          {errors.customer_name && (\n            <p className=\"errorMsg\">{errors.customer_name.message}</p>\n          )}\n        </Form.Group>\n\n        <Form.Group controlId=\"stakeholder_name\">\n          <Form.Label>Stakeholder Names</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"stakeholder_name\"\n            placeholder=\"Enter Stakeholders names\"\n            autoComplete=\"off\"\n            ref={register({\n              required: 'Stakeholder name is required.',\n              pattern: {\n                // value: /^[a-zA-Z]+$/,\n                message: 'Stakeholder name should contain only characters.'\n              }\n            })}\n            className={`${errors.stakeholder_name ? 'input-error' : ''}`}\n          />\n          {errors.stakeholder_name && (\n            <p className=\"errorMsg\">{errors.stakeholder_name.message}</p>\n          )}\n        </Form.Group> */}\n\n        <Form.Group>\n          <App />\n        </Form.Group>\n\n\n\n        {/* <Form.Group controlId=\"url\">\n          <Form.Label>Customer URL :</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"url\"\n            placeholder=\"Enter url\"\n            autoComplete=\"off\"\n            ref={register({\n              required: 'url is required.',\n              pattern: {\n                // value: /^[a-zA-Z]+$/,\n                message: 'url should contain only characters.'\n              }\n            })}\n            className={`${errors.url ? 'input-error' : ''}`}\n          />\n          {errors.url && (\n            <p className=\"errorMsg\">{errors.url.message}</p>\n          )}\n        </Form.Group>\n\n        <Form.Group controlId=\"region\">\n          <Form.Label>Region of Operation</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"region\"\n            placeholder=\"Enter the Region\"\n            autoComplete=\"off\"\n            ref={register({\n              required: 'Region is required.',\n              pattern: {\n                // value: /^[a-zA-Z]+$/,\n                message: 'Region should contain only characters.'\n              }\n            })}\n            className={`${errors.region ? 'input-error' : ''}`}\n          />\n          {errors.region && (\n            <p className=\"errorMsg\">{errors.region.message}</p>\n          )}\n        </Form.Group>\n\n        <Form.Group controlId=\"country_name\">\n          <Form.Label>Country</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"country_name\"\n            placeholder=\"Enter the Country\"\n            autoComplete=\"off\"\n            ref={register({\n              required: 'Country is required.',\n              pattern: {\n                // value: /^[a-zA-Z]+$/,\n                message: 'Country name should contain only characters.'\n              }\n            })}\n            className={`${errors.country_name ? 'input-error' : ''}`}\n          />\n          {errors.country_name && (\n            <p className=\"errorMsg\">{errors.country_name.message}</p>\n          )}\n        </Form.Group> */}\n      \n\n\n\n\n\n\n        <Button variant=\"primary\" type=\"submit\">\n          Next\n        </Button>\n      </motion.div>\n    </Form>\n  );\n};\n\nexport default FirstStep;\n","import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\n\nconst Progress = ({ location: { pathname } }) => {\n  const isFirstStep = pathname === '/';\n  const isSecondStep = pathname === '/second';\n  const isThirdStep = pathname === '/third';\n  const isLoginPage = pathname === '/login';\n\n  return (\n    <React.Fragment>\n      {!isLoginPage ? (\n        <div className=\"steps\">\n          <div className={`${isFirstStep ? 'step active' : 'step'}`}>\n            <div>1</div>\n            <div>\n              {isSecondStep || isThirdStep ? (\n                <Link to=\"/\">Step 1</Link>\n              ) : (\n                'Step 1'\n              )}\n            </div>\n          </div>\n          <div className={`${isSecondStep ? 'step active' : 'step'}`}>\n            <div>2</div>\n            <div>\n              {isThirdStep ? <Link to=\"/second\">Step 2</Link> : 'Step 2'}\n            </div>\n          </div>\n          <div className={`${pathname === '/third' ? 'step active' : 'step'}`}>\n            <div>3</div>\n            <div>Step 3</div>\n          </div>\n        </div>\n      ) : (\n        <div></div>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default withRouter(Progress);\n","import React from 'react';\nimport Progress from './Progress';\n\nconst Header = () => (\n  <div>\n    <h1>Multi Step Registration</h1>\n    <Progress />\n  </div>\n);\n\nexport default Header;\n","import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Form, Button } from 'react-bootstrap';\nimport axios from 'axios';\nimport { BASE_API_URL } from '../utils/constants';\n\nconst Login = () => {\n  const { register, handleSubmit, errors } = useForm();\n  const [successMessage, setSuccessMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [userDetails, setUserDetails] = useState('');\n\n  const onSubmit = async (data) => {\n    console.log(data);\n\n    try {\n      const response = await axios.post(`${BASE_API_URL}/login`, data);\n      setSuccessMessage('User with the provided credentials found.');\n      setErrorMessage('');\n      setUserDetails(response.data);\n    } catch (error) {\n      console.log(error);\n      if (error.response) {\n        console.log('error', error.response.data);\n        setErrorMessage(error.response.data);\n      }\n    }\n  };\n\n  return (\n    <Form className=\"input-form\" onSubmit={handleSubmit(onSubmit)}>\n      <div className=\"col-md-6 offset-md-3\">\n        {errorMessage ? (\n          <p className=\"errorMsg login-error\">{errorMessage}</p>\n        ) : (\n          <div>\n            <p className=\"successMsg\">{successMessage}</p>\n\n            {userDetails && (\n              <div className=\"user-details\">\n                <p>Following are the user details:</p>\n                <div>First name: {userDetails.first_name}</div>\n                <div>Last name: {userDetails.last_name}</div>\n                <div>Email: {userDetails.user_email}</div>\n                <div>Country: {userDetails.country}</div>\n                <div>State: {userDetails.state}</div>\n                <div>City: {userDetails.city}</div>\n              </div>\n            )}\n          </div>\n        )}\n        <Form.Group controlId=\"first_name\">\n          <Form.Label>Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            name=\"user_email\"\n            placeholder=\"Enter your email address\"\n            ref={register({\n              required: 'Email is required.',\n              pattern: {\n                value: /^[^@ ]+@[^@ ]+\\.[^@ .]{2,}$/,\n                message: 'Email is not valid.'\n              }\n            })}\n            className={`${errors.user_email ? 'input-error' : ''}`}\n          />\n          {errors.user_email && (\n            <p className=\"errorMsg\">{errors.user_email.message}</p>\n          )}\n        </Form.Group>\n\n        <Form.Group controlId=\"password\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            name=\"user_password\"\n            placeholder=\"Choose a password\"\n            ref={register({\n              required: 'Password is required.',\n              minLength: {\n                value: 6,\n                message: 'Password should have at-least 6 characters.'\n              }\n            })}\n            className={`${errors.user_password ? 'input-error' : ''}`}\n          />\n          {errors.user_password && (\n            <p className=\"errorMsg\">{errors.user_password.message}</p>\n          )}\n        </Form.Group>\n\n        <Button variant=\"primary\" type=\"submit\">\n          Check Login\n        </Button>\n      </div>\n    </Form>\n  );\n};\n\nexport default Login;\n","export const BASE_API_URL = '';\n","import React from 'react';\nimport Select from 'react-select';\nimport { useForm, Controller } from \"react-hook-form\";\nimport { Form, Button } from 'react-bootstrap';\nimport { motion } from 'framer-motion';\n\nconst departments = [\n  { value: \"Aerospace industry\", label: \"Aerospace industry\" },\n  { value: \"Agricultural industry\", label: \"Agricultural industry\" },\n  { value: \"Computer industry\", label: \"Computer industry\" },\n  { value: \"Construction industry\", label: \"Construction industry\" }\n];\n\n// const {\n//   control,\n//   handleSubmit,\n//   formState: { errors }\n// } = useForm();\n\nconst SecondStep = (props) => {\n  const { user } = props;\n  const { register, handleSubmit, errors } = useForm({\n    defaultValues: {\n      user_email: user.user_email,\n      user_password: user.user_password\n\n    }\n  });\n\n  const {\n    control\n  } = useForm();\n\n\n  const onSubmit = (data) => {\n    props.updateUser(data);\n    props.history.push('/third');\n  };\n\n  return (\n    <Form className=\"input-form\" onSubmit={handleSubmit(onSubmit)}>\n      <motion.div\n        className=\"col-md-6 offset-md-3\"\n        initial={{ x: '-100vw' }}\n        animate={{ x: 0 }}\n        transition={{ stiffness: 150 }}\n      >\n        <Form.Group controlId=\"user_email\">\n          <Form.Label>Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            name=\"user_email\"\n            placeholder=\"Enter your email address\"\n            autoComplete=\"off\"\n            ref={register({\n              required: 'Email is required.',\n              pattern: {\n                value: /^[^@ ]+@[^@ ]+\\.[^@ .]{2,}$/,\n                message: 'Email is not valid.'\n              }\n            })}\n            className={`${errors.user_email ? 'input-error' : ''}`}\n          />\n          {errors.user_email && (\n            <p className=\"errorMsg\">{errors.user_email.message}</p>\n          )}\n        </Form.Group>\n        \n\n\n\n        <Form.Group controlId=\"first_name\">\n          <Form.Label>First Name</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"first_name\"\n            placeholder=\"Enter First Name\"\n            autoComplete=\"on\"\n            ref={register({\n              required: 'First Name is required.',\n              pattern: {\n                value: /^[a-zA-Z]+$/,\n                message: 'First Name should contain only characters.'\n              }\n            })}\n            className={`${errors.first_name ? 'input-error' : ''}`}\n          />\n          {errors.first_name && (\n            <p className=\"errorMsg\">{errors.first_name.message}</p>\n          )}\n        </Form.Group>\n\n\n        <Form.Group controlId=\"last_name\">\n          <Form.Label>Last Name</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"last_name\"\n            placeholder=\"Enter Last Name\"\n            autoComplete=\"on\"\n            ref={register({\n              required: 'Last Name is required.',\n              pattern: {\n                value: /^[a-zA-Z]+$/,\n                message: 'Last Name should contain only characters.'\n              }\n            })}\n            className={`${errors.last_name ? 'input-error' : ''}`}\n          />\n          {errors.last_name && (\n            <p className=\"errorMsg\">{errors.last_name.message}</p>\n          )}\n        </Form.Group>\n\n\n        <Form.Group controlId=\"org_name\">\n          <Form.Label>Organisation Name</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"org_name\"\n            placeholder=\"Enter Organisation Name\"\n            autoComplete=\"on\"\n            ref={register({\n              required: 'Organisation Name is required.',\n              pattern: {\n                value: /^[a-zA-Z]+$/,\n                message: 'Organisation Name should contain only characters.'\n              }\n            })}\n            className={`${errors.org_name ? 'input-error' : ''}`}\n          />\n          {errors.org_name && (\n            <p className=\"errorMsg\">{errors.org_name.message}</p>\n          )}\n        </Form.Group>\n\n\n        <Form.Group controlId=\"org_url\">\n          <Form.Label>Organisation Website URL :</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"org_url\"\n            placeholder=\"Enter url\"\n            autoComplete=\"on\"\n            ref={register({\n              required: 'url is required.',\n              pattern: {\n                // value: /^[a-zA-Z]+$/,\n                message: 'url should contain only characters.'\n              }\n            })}\n            className={`${errors.org_url ? 'input-error' : ''}`}\n          />\n          {errors.org_url && (\n            <p className=\"errorMsg\">{errors.org_url.message}</p>\n          )}\n        </Form.Group>\n\n      \n        {/* <Form.Group controlId=\"ind_name\">        \n          <Form.Label>Select Industry of Interest</Form.Label>\n          <Form.Control\n            name=\"ind_name\"\n            placeholder=\"Enter Industries\"\n            \n            // control={control}\n            rules={{ required: true }}\n            render={({ field }) => (\n              <Select {...field} isMulti options={departments} />\n            )}\n          />\n          {errors.department && (\n            <p className=\"errorMsg\">This is a required field.</p>\n          )}\n        </Form.Group>   */}\n\n        \n\n        {/* <div class=\"form-group\">\n    <label for=\"exampleFormControlSelect1\">Select the Industries you sell to</label>\n    <select class=\"form-control\" id=\"exampleFormControlSelect1\">\n    <option>Select</option>\n      <option></option>\n      <option></option>\n      <option>Automotive industry</option>\n      <option>Basic metal industry</option>\n      <option>Chemical industry</option>\n      <option></option>\n      <option></option>\n      <option>Creative industry</option>\n      <option>Cultural industry</option>\n      <option>Defense industry</option>\n      <option>Education industry</option>\n      <option>Electric power industry</option>\n      <option>Electronics industry</option>\n      <option>Energy industry</option>\n      <option>Engineering industry</option>\n      <option>Entertainment industry</option>\n      <option>Farming industry</option>\n      <option>Fashion industry</option>\n      <option>Film industry</option>\n      <option>Financial services industry</option>\n      <option>Fishing industry</option>\n      <option>Food industry</option>\n      <option>Forestry industry</option>\n      <option>Gambling industry</option>\n      <option>Gas industry</option>\n      <option>Green industry</option>\n      <option>Health services industry</option>\n      <option>Hospitality industry</option>\n      <option>Hotels industry</option>\n      <option>Industrial robot industry</option>\n      <option>Information industry</option>\n      <option>Information technology industry</option>\n      <option>Infrastructure industry</option>\n      <option>Insurance industry</option>\n      <option>Leisure industry</option>\n      <option>Low technology industry</option>\n      <option>Manufacturing industry</option>\n      <option>Meat industry</option>\n      <option>Media industry</option>\n      <option>Merchandising industry</option>\n      <option>Mining industry</option>\n      <option>Music industry</option>\n      <option>News media industry</option>\n      <option>Oil and gas industry</option>\n      <option>Pharmaceutical industry</option>\n      <option>Professional industry</option>\n      <option>Publishing industry</option>\n      <option>Pulp and paper industry</option>\n      <option>Railway industry</option>\n      <option>Real estate industry</option>\n      <option>Retail industry</option>\n      <option>Scientific industry</option>\n      <option>Services industry</option>\n      <option>Sex industry</option>\n      <option>Software industry</option>\n      <option>Space industry</option>\n      <option>Sport industry</option>\n      <option>Steel industry</option>\n      <option>Technology industry</option>\n      <option>Telecommunications industry</option>\n      <option>Textile industry</option>\n      <option>Tobacco industry</option>\n      <option>Transport industry</option>\n      <option>Utility industry</option>\n      <option>Video game industry</option>\n      <option>Water industry</option>\n      <option>Wholesale industry</option>\n      <option>Wood industry</option>\n      \n    </select>\n  </div> */}\n \n\n        <Form.Group controlId=\"password\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            name=\"user_password\"\n            placeholder=\"Choose a password\"\n            autoComplete=\"off\"\n            ref={register({\n              required: 'Password is required.',\n              minLength: {\n                value: 6,\n                message: 'Password should have at-least 6 characters.'\n              }\n            })}\n            className={`${errors.user_password ? 'input-error' : ''}`}\n          />\n          {errors.user_password && (\n            <p className=\"errorMsg\">{errors.user_password.message}</p>\n          )}\n        </Form.Group>\n\n        <Form.Group controlId=\"deciding_roles\">\n          <Form.Label>Whom do you sell?</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"deciding_roles\"\n            placeholder=\"Business Roles that take purchase decisions.\"\n            autoComplete=\"off\"\n            ref={register({\n              required: 'This field is required.',\n              pattern: {\n                // value: /^[a-zA-Z]+$/,\n                message: 'Should contain only characters.'\n              }\n            })}\n            className={`${errors.deciding_roles ? 'input-error' : ''}`}\n          />\n          {errors.deciding_roles && (\n            <p className=\"errorMsg\">{errors.deciding_roles.message}</p>\n          )}\n        </Form.Group>\n\n\n        <Form.Group controlId=\"roles\">\n          <Form.Label>Whom do you have to convince of your product or service's value?</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"roles\"\n            placeholder=\"Enter the Business roles \"\n            autoComplete=\"off\"\n            ref={register({\n              required: 'This Field is required.',\n              pattern: {\n                // value: /^[a-zA-Z]+$/,\n                message: 'Stakeholder name should contain only characters.'\n              }\n            })}\n            className={`${errors.roles ? 'input-error' : ''}`}\n          />\n          {errors.roles && (\n            <p className=\"errorMsg\">{errors.roles.message}</p>\n          )}\n        </Form.Group>\n\n\n        <Form.Group controlId=\"news_tags\">\n          <Form.Label>Please list Tags/Keywords that make a news important for you.\n</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"news_tags\"\n            placeholder=\"Enter Tags/Keywords names\"\n            autoComplete=\"off\"\n            ref={register({\n              required: 'Tags/Keywords are required.',\n              pattern: {\n                // value: /^[a-zA-Z]+$/,\n                message: 'Tags/Keywords should contain only characters.'\n              }\n            })}\n            className={`${errors.news_tags ? 'input-error' : ''}`}\n          />\n          {errors.new_tags && (\n            <p className=\"errorMsg\">{errors.news_tags.message}</p>\n          )}\n        </Form.Group>\n\n        {/* <div className=\"form-control\">\n        <Form.Label>Select Industry of Interest</Form.Label>\n          <Controller\n            name=\"ind_name\"\n            type=\"select\"\n            control={control}\n            rules={{ required: true }}\n            render={({ field }) => (\n              <Select {...field} isMulti options={departments} />\n            )}\n            ref={register({\n            })}\n          />\n          {errors.department && (\n            <p className=\"errorMsg\">This is a required field.</p>\n          )}\n        </div> */}\n\n\n<br></br>\n\n\n        <Button variant=\"primary\" type=\"submit\">\n          Next\n        </Button>\n      </motion.div>\n    </Form>\n  );\n};\n\nexport default SecondStep;\n","import \"./App.css\";\r\n// import Form from \"./components/Form\";\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { useState } from 'react';\r\n\r\n\r\n\r\n\r\nfunction App2() {\r\n  const [formFields, setFormFields] = useState([\r\n    { indname: '',global: '',country: '', region: '' },\r\n  ])\r\n\r\n  const handleFormChange = (event, index) => {\r\n    let data = [...formFields];\r\n    data[index][event.target.name] = event.target.value;\r\n    setFormFields(data);\r\n  }\r\n\r\n  const submit = (e) => {\r\n    e.preventDefault();\r\n    console.log(formFields)\r\n  }\r\n\r\n  const addFields = (e) => {\r\n    e.preventDefault();\r\n    let object = {\r\n      indname: '',\r\n      global: '',\r\n      country: '',\r\n      region: ''\r\n    }\r\n\r\n    setFormFields([...formFields, object])\r\n  }\r\n\r\n  const removeFields = (index) => {\r\n    let data = [...formFields];\r\n    data.splice(index, 1)\r\n    setFormFields(data)\r\n  }\r\n\r\n  return (\r\n\r\n    <div className=\"App2\">\r\n    \r\n      {/* <Form > */}\r\n      {/* //Industries to follow */}\r\n  \r\n      <Form onSubmit={submit}>\r\n        {formFields.map((form, index) => {\r\n          return (\r\n            <div key={index}>\r\n              <input\r\n                name='indname'\r\n                placeholder='Name:'\r\n                onChange={event => handleFormChange(event, index)}\r\n                value={form.indname}\r\n              />\r\n              <input\r\n                name='global'\r\n                placeholder='Global'\r\n                onChange={event => handleFormChange(event, index)}\r\n                value={form.global}\r\n              />\r\n              <input\r\n                name='country'\r\n                placeholder='Country/s of Operation'\r\n                onChange={event => handleFormChange(event, index)}\r\n                value={form.country}\r\n              />\r\n              <input\r\n                name='region'\r\n                placeholder='Region of Operation'\r\n                onChange={event => handleFormChange(event, index)}\r\n                value={form.region}\r\n              />\r\n              <br></br>\r\n              <Button onClick={() => removeFields(index)}>Remove</Button>\r\n            </div>\r\n          )\r\n        })}\r\n      </Form>\r\n      <Button type=\"button\" onClick={addFields}>Add More..</Button>\r\n      <br />\r\n      <Button onClick={submit}>Submit</Button>\r\n      {/* </Form> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App2;","import \"./App.css\";\r\n// import Form from \"./components/Form\";\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { useState } from 'react';\r\n\r\n\r\n\r\n\r\nfunction App3() {\r\n  const [formFields, setFormFields] = useState([\r\n    { name: '',email: '',linkid: '', twitterid: '',facebookid: '' },\r\n  ])\r\n\r\n  const handleFormChange = (event, index) => {\r\n    let data = [...formFields];\r\n    data[index][event.target.name] = event.target.value;\r\n    setFormFields(data);\r\n  }\r\n\r\n  const submit = (e) => {\r\n    e.preventDefault();\r\n    console.log(formFields)\r\n  }\r\n\r\n  const addFields = (e) => {\r\n    e.preventDefault();\r\n    let object = {\r\n      name: '',\r\n      email: '',\r\n      linkid: '',\r\n      twitterid: '',\r\n      facebookid: ''\r\n    }\r\n\r\n    setFormFields([...formFields, object])\r\n  }\r\n\r\n  const removeFields = (index) => {\r\n    let data = [...formFields];\r\n    data.splice(index, 1)\r\n    setFormFields(data)\r\n  }\r\n\r\n  return (\r\n\r\n    <div className=\"App3\">\r\n    \r\n      {/* <Form > */}\r\n  \r\n      <Form onSubmit={submit}>\r\n        {formFields.map((form, index) => {\r\n          return (\r\n            <div key={index}>\r\n              <input\r\n                name='name'\r\n                placeholder='Name'\r\n                onChange={event => handleFormChange(event, index)}\r\n                value={form.name}\r\n              />\r\n              <input\r\n                name='email'\r\n                placeholder='E Mail'\r\n                onChange={event => handleFormChange(event, index)}\r\n                value={form.email}\r\n              />\r\n              <input\r\n                name='linkid'\r\n                placeholder='LinkedIn Id'\r\n                onChange={event => handleFormChange(event, index)}\r\n                value={form.linkid}\r\n              />\r\n              <input\r\n                name='twitterid'\r\n                placeholder='Twitter Id'\r\n                onChange={event => handleFormChange(event, index)}\r\n                value={form.twitterid}\r\n              />\r\n              <input\r\n                name='facebookid'\r\n                placeholder='Facebook Id'\r\n                onChange={event => handleFormChange(event, index)}\r\n                value={form.facebookid}\r\n              />\r\n              <br />\r\n              <Button onClick={() => removeFields(index)}>Remove</Button>\r\n            </div>\r\n          )\r\n        })}\r\n      </Form>\r\n      <Button type=\"button\" onClick={addFields}>Add More..</Button>\r\n      <br />\r\n      <Button onClick={submit}>Submit</Button>\r\n      {/* </Form> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App3;","import React, { useState, useEffect } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport csc from 'country-state-city';\nimport axios from 'axios';\nimport { motion } from 'framer-motion';\nimport Swal from 'sweetalert2';\nimport { BASE_API_URL } from '../utils/constants';\nimport App2 from \"./App2\";\nimport App3 from \"./App3\";\n\nconst ThirdStep = (props) => {\n  const [countries, setCountries] = useState([]);\n  const [states, setStates] = useState([]);\n  const [cities, setCities] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [selectedCountry, setSelectedCountry] = useState('');\n  const [selectedState, setSelectedState] = useState('');\n  const [selectedCity, setSelectedCity] = useState('');\n\n  useEffect(() => {\n    const getCountries = async () => {\n      try {\n        setIsLoading(true);\n        const result = await csc.getAllCountries();\n        let allCountries = [];\n        allCountries = result?.map(({ isoCode, name }) => ({\n          isoCode,\n          name\n        }));\n        const [{ isoCode: firstCountry } = {}] = allCountries;\n        setCountries(allCountries);\n        setSelectedCountry(firstCountry);\n        setIsLoading(false);\n      } catch (error) {\n        setCountries([]);\n        setIsLoading(false);\n      }\n    };\n\n    getCountries();\n  }, []);\n\n  useEffect(() => {\n    const getStates = async () => {\n      try {\n        const result = await csc.getStatesOfCountry(selectedCountry);\n        let allStates = [];\n        allStates = result?.map(({ isoCode, name }) => ({\n          isoCode,\n          name\n        }));\n        const [{ isoCode: firstState = '' } = {}] = allStates;\n        setCities([]);\n        setSelectedCity('');\n        setStates(allStates);\n        setSelectedState(firstState);\n      } catch (error) {\n        setStates([]);\n        setCities([]);\n        setSelectedCity('');\n      }\n    };\n\n    getStates();\n  }, [selectedCountry]);\n\n  useEffect(() => {\n    const getCities = async () => {\n      try {\n        const result = await csc.getCitiesOfState(\n          selectedCountry,\n          selectedState\n        );\n        let allCities = [];\n        allCities = result?.map(({ name }) => ({\n          name\n        }));\n        const [{ name: firstCity = '' } = {}] = allCities;\n        setCities(allCities);\n        setSelectedCity(firstCity);\n      } catch (error) {\n        setCities([]);\n      }\n    };\n\n    getCities();\n  }, [selectedState]);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { user } = props;\n      const updatedData = {\n        country: countries.find(\n          (country) => country.isoCode === selectedCountry\n        )?.name,\n        state:\n          states.find((state) => state.isoCode === selectedState)?.name || '', // or condition added because selectedState might come as undefined\n        city: selectedCity\n      };\n\n      await axios.post(`${BASE_API_URL}/register`, {\n        ...user,\n        ...updatedData\n      });\n      Swal.fire('Awesome!', \"You're successfully registered!\", 'success').then(\n        (result) => {\n          if (result.isConfirmed || result.isDismissed) {\n            props.resetUser();\n            props.history.push('/');\n          }\n        }\n      );\n    } catch (error) {\n      if (error.response) {\n        Swal.fire({\n          icon: 'error',\n          title: 'Oops...',\n          text: error.response.data\n        });\n        console.log('error', error.response.data);\n      }\n    }\n  };\n\n  return (\n    <Form className=\"input-form\" onSubmit={handleSubmit}>\n      <motion.div\n        className=\"col-md-6 offset-md-3\"\n        initial={{ x: '-100vw' }}\n        animate={{ x: 0 }}\n        transition={{ stiffness: 150 }}\n      >\n\n        <Form.Group>\n        <Form.Label>Industry To Follow</Form.Label>\n          <App2></App2>\n        </Form.Group>\n\n        <Form.Group>\n        <Form.Label>Companies Interested in</Form.Label>\n          <App2></App2>\n        </Form.Group>\n\n        <Form.Group>\n        <Form.Label>People you like to follow</Form.Label>\n          <App3></App3>\n        </Form.Group>\n\n\n        <Form.Group controlId=\"country\">\n          {isLoading && (\n            <p className=\"loading\">Loading countries. Please wait...</p>\n          )}\n          <Form.Label>Country</Form.Label>\n          <Form.Control\n            as=\"select\"\n            name=\"country\"\n            value={selectedCountry}\n            onChange={(event) => setSelectedCountry(event.target.value)}\n          >\n            {countries.map(({ isoCode, name }) => (\n              <option value={isoCode} key={isoCode}>\n                {name}\n              </option>\n            ))}\n          </Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId=\"state\">\n          <Form.Label>State</Form.Label>\n          <Form.Control\n            as=\"select\"\n            name=\"state\"\n            value={selectedState}\n            onChange={(event) => setSelectedState(event.target.value)}\n          >\n            {states.length > 0 ? (\n              states.map(({ isoCode, name }) => (\n                <option value={isoCode} key={isoCode}>\n                  {name}\n                </option>\n              ))\n            ) : (\n              <option value=\"\" key=\"\">\n                No state found\n              </option>\n            )}\n          </Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId=\"city\">\n          <Form.Label>City</Form.Label>\n          <Form.Control\n            as=\"select\"\n            name=\"city\"\n            value={selectedCity}\n            onChange={(event) => setSelectedCity(event.target.value)}\n          >\n            {cities.length > 0 ? (\n              cities.map(({ name }) => (\n                <option value={name} key={name}>\n                  {name}\n                </option>\n              ))\n            ) : (\n              <option value=\"\">No cities found</option>\n            )}\n          </Form.Control>\n        </Form.Group>\n\n        <Button variant=\"primary\" type=\"submit\">\n          Register\n        </Button>\n      </motion.div>\n    </Form>\n  );\n};\n\nexport default ThirdStep;\n","import React, { useState } from 'react';\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport FirstStep from '../components/FirstStep';\nimport Header from '../components/Header';\nimport Login from '../components/Login';\nimport SecondStep from '../components/SecondStep';\nimport ThirdStep from '../components/ThirdStep';\n\nconst AppRouter = () => {\n  const [user, setUser] = useState({});\n\n  const updateUser = (data) => {\n    setUser((prevUser) => ({ ...prevUser, ...data }));\n  };\n\n  const resetUser = () => {\n    setUser({});\n  };\n\n  return (\n    <BrowserRouter>\n      <div className=\"container\">\n        <Header />\n        <Switch>\n          <Route\n            render={(props) => (\n              <FirstStep {...props} user={user} updateUser={updateUser} />\n            )}\n            path=\"/\"\n            exact={true}\n          />\n          <Route\n            render={(props) => (\n              <SecondStep {...props} user={user} updateUser={updateUser} />\n            )}\n            path=\"/second\"\n          />\n          <Route\n            render={(props) => (\n              <ThirdStep\n                {...props}\n                user={user}\n                updateUser={updateUser}\n                resetUser={resetUser}\n              />\n            )}\n            path=\"/third\"\n          />\n          <Route component={Login} path=\"/login\" />\n          <Route render={() => <Redirect to=\"/\" />} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default AppRouter;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppRouter from './router/AppRouter';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles.scss';\n\nReactDOM.render(<AppRouter />, document.getElementById('root'));\n"],"sourceRoot":""}